var searchIndex = JSON.parse('{\
"kani":{"doc":"","t":"CYFFAFFCFFOAXXAXXAXAIKLFDFFFLLLLLLLLLLLLFF","n":["Arbitrary","Arbitrary","any","any_where","arbitrary","assert","assume","block_on","concrete_playback_run","cover","cover","futures","proof","should_panic","slice","solver","stub","tuple","unwind","vec","Arbitrary","any","any_array","block_on","AnySlice","any_slice","any_slice_of_array","any_slice_of_array_mut","borrow","borrow_mut","deref","deref_mut","drop","from","get_slice","get_slice_mut","into","try_from","try_into","type_id","any_vec","exact_vec"],"q":[[0,"kani"],[20,"kani::arbitrary"],[23,"kani::futures"],[24,"kani::slice"],[40,"kani::vec"]],"d":["","Allow users to auto generate Arbitrary implementations by …","This creates an symbolic <em>valid</em> value of type <code>T</code>. You can …","This creates a symbolic <em>valid</em> value of type <code>T</code>. The value …","This module introduces the Arbitrary trait as well as …","Creates an assertion of the specified condition and …","Creates an assumption that will be valid after this …","","NOP <code>concrete_playback</code> for type checking during …","Creates a cover property with the specified condition and …","A macro to check if a condition is satisfiable at a …","This module contains functions to work with futures (and …","Marks a Kani proof harness","Specifies that a proof harness is expected to panic.**","","Select the SAT solver to use with CBMC for this harness …","Specify a function/method stub pair to use for proof …","Support for arbitrary tuples where each element implements …","Set Loop unwind limit for proof harnesses The attribute ‘…","","This trait should be used to generate symbolic variables …","","","A very simple executor: it polls the future in a busy loop …","A struct that stores a slice of type <code>T</code> with a …","","Given an array <code>arr</code> of length <code>LENGTH</code>, this function returns …","A mutable version of the previous function","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Generates an arbitrary vector whose length is at most …","Generates an arbitrary vector that is exactly EXACT_LENGTH …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0],"f":[0,0,[[],1],[2,1],0,[[3,4]],[3],0,[[[6,[[6,[5]]]],7]],[[3,4]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[8],0,[[],[[9,[1]]]],[[]],[[]],[[]],[[]],[9],[9],[9],[[]],[9],[9],[[]],[[],10],[[],10],[[],11],[[],[[6,[1]]]],[[],[[6,[1]]]]],"c":[],"p":[[8,"Arbitrary"],[8,"FnOnce"],[15,"bool"],[15,"str"],[15,"u8"],[3,"Vec"],[8,"Fn"],[8,"Future"],[3,"AnySlice"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
